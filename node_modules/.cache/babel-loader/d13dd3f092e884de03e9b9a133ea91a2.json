{"ast":null,"code":"import _slicedToArray from \"P:\\\\hooks-02-hooks-enabled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"P:\\\\hooks-02-hooks-enabled\\\\src\\\\components\\\\Todo.js\";\n//use means hook functions\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar todo = function todo(props) {\n  //useState passes two values, inputState[0] and inputState[1]. Unlike setState in class based components,\n  //  usestate will not merge, but replace entire old state with new one. Use state must be used at the top level of \n  //  component function. Has to be component function. Cannot call useState in loops or any nested functions. Has to be\n  //  root level of the component.\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      todoName = _useState2[0],\n      setTodoName = _useState2[1]; //separate useState is not required but reccomended for ease of separation, control, and manipulation\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todoList = _useState4[0],\n      setTodoList = _useState4[1]; // Use effect is function passes another function to be executed when called.\n  //For this particular case it will be executed as soon as the component loads\n\n\n  useEffect(function () {\n    axios.get('https://todolist-1d92c.firebaseio.com/todos.json').then(function (result) {\n      console.log(result);\n      var todoData = result.data;\n      var todos = [];\n\n      for (var key in todoData) {\n        todos.push({\n          id: key,\n          name: todoData[key].name\n        });\n      }\n\n      setTodoList(todos);\n    }); //executes this return function on every rerender, can be used as a clean up\n\n    return function () {\n      console.log(\"Cleanup\");\n    }; //adding the empty array as a second argument makes useEffect act like componentDidMount, therefore only loads once\n    //No argument will run for every render cycle. \n  }, [todoName]);\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    // inputState[1](event.target.value)\n    setTodoName(event.target.value);\n  };\n\n  var todoAddHandler = function todoAddHandler() {\n    // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\n    setTodoList(todoList.concat(todoName));\n    axios.post('https://todolist-1d92c.firebaseio.com/todos.json', {\n      name: todoName\n    }).then(function (res) {\n      console.log(res);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }; //   inputState[0] is a reference to latest state\n  //inputState[1] is a function we can execute to update state to update \n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Todo\",\n    onChange: inputChangeHandler,\n    value: todoName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: todoAddHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, todoList.map(function (todo) {\n    return React.createElement(\"li\", {\n      key: todo.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, todo.name);\n  })));\n};\n\nexport default todo; //     //multiple states in one useState\n//  const [todoState, setTodoState] = useState({userInput: '', todoList: []});\n//     const inputChangeHandler=(event)=>{\n//         setTodoState({\n//             userInput: event.target.value, \n//             todoList: todoState.todoList\n//         })\n//     }\n//     const todoAddHandler=()=>{\n//         // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\n//         setTodoState({\n//             userInput: todoState.userInput, \n//             todoList: todoState.todoList.concat(todoState.userInput)\n//         })\n//     }\n//     //inputState[0] is a reference to latest state\n//     //inputState[1] is a function we can execute to update state to update \n//     return (<React.Fragment>\n//         <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoState.userInput}/>\n//         <button type='button' onClick={todoAddHandler}>Add</button>\n//         <ul>\n//             {todoState.todoList.map(todo=>(<li key={todo}>{todo}</li>))}\n//         </ul>\n//     </React.Fragment>)\n// };\n// export default todo;","map":{"version":3,"sources":["P:\\hooks-02-hooks-enabled\\src\\components\\Todo.js"],"names":["React","useState","useEffect","axios","todo","props","todoName","setTodoName","todoList","setTodoList","get","then","result","console","log","todoData","data","todos","key","push","id","name","inputChangeHandler","event","target","value","todoAddHandler","concat","post","res","catch","err","map"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAG;AACjB;AACA;AACA;AACA;AAJiB,kBAMeJ,QAAQ,CAAC,EAAD,CANvB;AAAA;AAAA,MAMVK,QANU;AAAA,MAMAC,WANA,kBAOrB;;;AAPqB,mBAQeN,QAAQ,CAAC,EAAD,CARvB;AAAA;AAAA,MAQVO,QARU;AAAA,MAQAC,WARA,kBAUjB;AACA;;;AACAP,EAAAA,SAAS,CAAC,YAAI;AACVC,IAAAA,KAAK,CAACO,GAAN,CAAU,kDAAV,EACCC,IADD,CACM,UAAAC,MAAM,EAAG;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAMG,QAAQ,GAAGH,MAAM,CAACI,IAAxB;AACA,UAAMC,KAAK,GAAE,EAAb;;AACA,WAAK,IAAMC,GAAX,IAAkBH,QAAlB,EAA2B;AACvBE,QAAAA,KAAK,CAACE,IAAN,CAAW;AAACC,UAAAA,EAAE,EAAEF,GAAL;AAAUG,UAAAA,IAAI,EAAEN,QAAQ,CAACG,GAAD,CAAR,CAAcG;AAA9B,SAAX;AACH;;AACDZ,MAAAA,WAAW,CAACQ,KAAD,CAAX;AACH,KATD,EADU,CAWV;;AACA,WAAO,YAAK;AACRJ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,KAFD,CAZU,CAeV;AACA;AACH,GAjBQ,EAiBN,CAACR,QAAD,CAjBM,CAAT;;AAqBA,MAAMgB,kBAAkB,GAAC,SAAnBA,kBAAmB,CAACC,KAAD,EAAS;AAC9B;AACAhB,IAAAA,WAAW,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACH,GAHD;;AAKA,MAAMC,cAAc,GAAC,SAAfA,cAAe,GAAI;AACrB;AACAjB,IAAAA,WAAW,CAACD,QAAQ,CAACmB,MAAT,CAAgBrB,QAAhB,CAAD,CAAX;AACAH,IAAAA,KAAK,CAACyB,IAAN,CAAW,kDAAX,EAA+D;AAACP,MAAAA,IAAI,EAAEf;AAAP,KAA/D,EACCK,IADD,CACM,UAAAkB,GAAG,EAAE;AACPhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;AACH,KAHD,EAGGC,KAHH,CAGS,UAAAC,GAAG,EAAE;AACVlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;AACH,KALD;AAMH,GATD,CAtCiB,CAkDjB;AACA;;;AACA,SAAQ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEJ;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,MAA/B;AAAsC,IAAA,QAAQ,EAAET,kBAAhD;AAAoE,IAAA,KAAK,EAAEhB,QAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFI,EAGJ;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEoB,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHI,EAIJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKlB,QAAQ,CAACwB,GAAT,CAAa,UAAA5B,IAAI;AAAA,WAAG;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACgB,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBhB,IAAI,CAACiB,IAAxB,CAAH;AAAA,GAAjB,CADL,CAJI,CAAR;AAQH,CA5DD;;AA8DA,eAAejB,IAAf,C,CASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["//use means hook functions\r\nimport React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst todo = props =>{\r\n    //useState passes two values, inputState[0] and inputState[1]. Unlike setState in class based components,\r\n    //  usestate will not merge, but replace entire old state with new one. Use state must be used at the top level of \r\n    //  component function. Has to be component function. Cannot call useState in loops or any nested functions. Has to be\r\n    //  root level of the component.\r\n    //[todoName, setTodoName] is array destructuring. Pull out elements of an array to assign them\r\n    const [todoName, setTodoName] = useState('');\r\n//separate useState is not required but reccomended for ease of separation, control, and manipulation\r\n    const [todoList, setTodoList] = useState([]);\r\n\r\n    // Use effect is function passes another function to be executed when called.\r\n    //For this particular case it will be executed as soon as the component loads\r\n    useEffect(()=>{\r\n        axios.get('https://todolist-1d92c.firebaseio.com/todos.json')\r\n        .then(result =>{\r\n            console.log(result);\r\n            const todoData = result.data\r\n            const todos =[];\r\n            for (const key in todoData){\r\n                todos.push({id: key, name: todoData[key].name})\r\n            }\r\n            setTodoList(todos);\r\n        })\r\n        //executes this return function on every rerender, can be used as a clean up\r\n        return () =>{\r\n            console.log(\"Cleanup\")\r\n        }\r\n        //adding the empty array as a second argument makes useEffect act like componentDidMount, therefore only loads once\r\n        //No argument will run for every render cycle. \r\n    }, [todoName])\r\n\r\n\r\n\r\n    const inputChangeHandler=(event)=>{\r\n        // inputState[1](event.target.value)\r\n        setTodoName(event.target.value)\r\n    }\r\n\r\n    const todoAddHandler=()=>{\r\n        // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\r\n        setTodoList(todoList.concat(todoName));\r\n        axios.post('https://todolist-1d92c.firebaseio.com/todos.json', {name: todoName})\r\n        .then(res=>{\r\n            console.log(res);\r\n        }).catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n\r\n    //   inputState[0] is a reference to latest state\r\n    //inputState[1] is a function we can execute to update state to update \r\n    return (<React.Fragment>\r\n\r\n        <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoName}/>\r\n        <button type='button' onClick={todoAddHandler}>Add</button>\r\n        <ul>\r\n            {todoList.map(todo=>(<li key={todo.id}>{todo.name}</li>))}\r\n        </ul>\r\n    </React.Fragment>)\r\n};\r\n\r\nexport default todo;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     //multiple states in one useState\r\n//  const [todoState, setTodoState] = useState({userInput: '', todoList: []});\r\n\r\n//     const inputChangeHandler=(event)=>{\r\n//         setTodoState({\r\n//             userInput: event.target.value, \r\n//             todoList: todoState.todoList\r\n//         })\r\n//     }\r\n\r\n//     const todoAddHandler=()=>{\r\n//         // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\r\n//         setTodoState({\r\n//             userInput: todoState.userInput, \r\n//             todoList: todoState.todoList.concat(todoState.userInput)\r\n//         })\r\n//     }\r\n\r\n\r\n//     //inputState[0] is a reference to latest state\r\n//     //inputState[1] is a function we can execute to update state to update \r\n//     return (<React.Fragment>\r\n\r\n//         <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoState.userInput}/>\r\n//         <button type='button' onClick={todoAddHandler}>Add</button>\r\n//         <ul>\r\n//             {todoState.todoList.map(todo=>(<li key={todo}>{todo}</li>))}\r\n//         </ul>\r\n//     </React.Fragment>)\r\n// };\r\n\r\n// export default todo;"]},"metadata":{},"sourceType":"module"}