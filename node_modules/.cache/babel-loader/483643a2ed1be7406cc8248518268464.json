{"ast":null,"code":"import _slicedToArray from \"P:\\\\hooks-02-hooks-enabled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"P:\\\\hooks-02-hooks-enabled\\\\src\\\\components\\\\Todo.js\";\n//use means hook functions\nimport React, { useState } from 'react';\n\nvar todo = function todo(props) {\n  //useState passes two values, inputState[0] and inputState[1]\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      todoName = _useState2[0],\n      setTodoName = _useState2[1]; //separate useState is not required but reccomended for ease of separation, control, and manipulation\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todoList = _useState4[0],\n      setTodoList = _useState4[1];\n\n  var _useState5 = useState({\n    userInput: '',\n    todoList: []\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      todoState = _useState6[0],\n      setTodoState = _useState6[1];\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    // inputState[1](event.target.value)\n    setTodoName(event.target.value);\n  };\n\n  var todoAddHandler = function todoAddHandler() {\n    // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\n    setTodoList(todoList.concat(todoName));\n  }; //inputState[0] is a reference to latest state\n  //inputState[1] is a function we can execute to update state to update \n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Todo\",\n    onChange: inputChangeHandler,\n    value: todoName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: todoAddHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, todoList.map(function (todo) {\n    return React.createElement(\"li\", {\n      key: todo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, todo);\n  })));\n};\n\nexport default todo;","map":{"version":3,"sources":["P:\\hooks-02-hooks-enabled\\src\\components\\Todo.js"],"names":["React","useState","todo","props","todoName","setTodoName","todoList","setTodoList","userInput","todoState","setTodoState","inputChangeHandler","event","target","value","todoAddHandler","concat","map"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAG;AACjB;AADiB,kBAGeF,QAAQ,CAAC,EAAD,CAHvB;AAAA;AAAA,MAGVG,QAHU;AAAA,MAGAC,WAHA,kBAIrB;;;AAJqB,mBAKeJ,QAAQ,CAAC,EAAD,CALvB;AAAA;AAAA,MAKVK,QALU;AAAA,MAKAC,WALA;;AAAA,mBAOcN,QAAQ,CAAC;AAACO,IAAAA,SAAS,EAAE,EAAZ;AAAgBF,IAAAA,QAAQ,EAAE;AAA1B,GAAD,CAPtB;AAAA;AAAA,MAObG,SAPa;AAAA,MAOFC,YAPE;;AASjB,MAAMC,kBAAkB,GAAC,SAAnBA,kBAAmB,CAACC,KAAD,EAAS;AAC9B;AACAP,IAAAA,WAAW,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACH,GAHD;;AAKA,MAAMC,cAAc,GAAC,SAAfA,cAAe,GAAI;AACrB;AACAR,IAAAA,WAAW,CAACD,QAAQ,CAACU,MAAT,CAAgBZ,QAAhB,CAAD,CAAX;AACH,GAHD,CAdiB,CAoBjB;AACA;;;AACA,SAAQ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEJ;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,MAA/B;AAAsC,IAAA,QAAQ,EAAEO,kBAAhD;AAAoE,IAAA,KAAK,EAAEP,QAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFI,EAGJ;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEW,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHI,EAIJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,QAAQ,CAACW,GAAT,CAAa,UAAAf,IAAI;AAAA,WAAG;AAAI,MAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBA,IAAhB,CAAH;AAAA,GAAjB,CADL,CAJI,CAAR;AAQH,CA9BD;;AAgCA,eAAeA,IAAf","sourcesContent":["//use means hook functions\r\nimport React, {useState} from 'react';\r\n\r\nconst todo = props =>{\r\n    //useState passes two values, inputState[0] and inputState[1]\r\n    //[todoName, setTodoName] is array destructuring. Pull out elements of an array to assign them\r\n    const [todoName, setTodoName] = useState('');\r\n//separate useState is not required but reccomended for ease of separation, control, and manipulation\r\n    const [todoList, setTodoList] = useState([]);\r\n\r\n const [todoState, setTodoState] = useState({userInput: '', todoList: []});\r\n\r\n    const inputChangeHandler=(event)=>{\r\n        // inputState[1](event.target.value)\r\n        setTodoName(event.target.value)\r\n    }\r\n\r\n    const todoAddHandler=()=>{\r\n        // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\r\n        setTodoList(todoList.concat(todoName))\r\n    }\r\n\r\n\r\n    //inputState[0] is a reference to latest state\r\n    //inputState[1] is a function we can execute to update state to update \r\n    return (<React.Fragment>\r\n\r\n        <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoName}/>\r\n        <button type='button' onClick={todoAddHandler}>Add</button>\r\n        <ul>\r\n            {todoList.map(todo=>(<li key={todo}>{todo}</li>))}\r\n        </ul>\r\n    </React.Fragment>)\r\n};\r\n\r\nexport default todo;"]},"metadata":{},"sourceType":"module"}