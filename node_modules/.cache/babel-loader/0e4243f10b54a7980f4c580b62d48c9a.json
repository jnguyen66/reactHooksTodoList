{"ast":null,"code":"import _slicedToArray from \"P:\\\\hooks-02-hooks-enabled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"P:\\\\hooks-02-hooks-enabled\\\\src\\\\components\\\\Todo.js\";\n//use means hook functions\nimport React, { useState } from 'react';\n\nvar todo = function todo(props) {\n  //     //useState passes two values, inputState[0] and inputState[1]. Unlike setState in class based components,\n  //      usestate will not merge, but replace entire old state with new one. Use state must be used at the top level of \n  //      component function. Has to be component function. \n  //     //[todoName, setTodoName] is array destructuring. Pull out elements of an array to assign them\n  //     const [todoName, setTodoName] = useState('');\n  // //separate useState is not required but reccomended for ease of separation, control, and manipulation\n  //     const [todoList, setTodoList] = useState([]);\n  //     const inputChangeHandler=(event)=>{\n  //         // inputState[1](event.target.value)\n  //         setTodoName(event.target.value)\n  //     }\n  //     const todoAddHandler=()=>{\n  //         // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\n  //         setTodoList(todoList.concat(todoName))\n  //     }\n  //inputState[0] is a reference to latest state\n  //     //inputState[1] is a function we can execute to update state to update \n  //     return (<React.Fragment>\n  //         <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoName}/>\n  //         <button type='button' onClick={todoAddHandler}>Add</button>\n  //         <ul>\n  //             {todoList.map(todo=>(<li key={todo}>{todo}</li>))}\n  //         </ul>\n  //     </React.Fragment>)\n  // };\n  // export default todo;\n  var _useState = useState({\n    userInput: '',\n    todoList: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      todoState = _useState2[0],\n      setTodoState = _useState2[1];\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    setTodoState({\n      userInput: event.target.value,\n      todoList: todoState.todoList\n    });\n  };\n\n  var todoAddHandler = function todoAddHandler() {\n    // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\n    setTodoState({\n      userInput: todoState.userInput,\n      todoList: todoState.todoList.concat(todoState.userInput)\n    });\n  }; //inputState[0] is a reference to latest state\n  //inputState[1] is a function we can execute to update state to update \n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Todo\",\n    onChange: inputChangeHandler,\n    value: todoState.userInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: todoAddHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, todoState.todoList.map(function (todo) {\n    return React.createElement(\"li\", {\n      key: todo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, todo);\n  })));\n};\n\nexport default todo;","map":{"version":3,"sources":["P:\\hooks-02-hooks-enabled\\src\\components\\Todo.js"],"names":["React","useState","todo","props","userInput","todoList","todoState","setTodoState","inputChangeHandler","event","target","value","todoAddHandler","concat","map"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGE;AACF;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAhCqB,kBAoCcF,QAAQ,CAAC;AAACG,IAAAA,SAAS,EAAE,EAAZ;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAAD,CApCtB;AAAA;AAAA,MAoCbC,SApCa;AAAA,MAoCFC,YApCE;;AAsCjB,MAAMC,kBAAkB,GAAC,SAAnBA,kBAAmB,CAACC,KAAD,EAAS;AAC9BF,IAAAA,YAAY,CAAC;AACTH,MAAAA,SAAS,EAAEK,KAAK,CAACC,MAAN,CAAaC,KADf;AAETN,MAAAA,QAAQ,EAAEC,SAAS,CAACD;AAFX,KAAD,CAAZ;AAIH,GALD;;AAOA,MAAMO,cAAc,GAAC,SAAfA,cAAe,GAAI;AACrB;AACAL,IAAAA,YAAY,CAAC;AACTH,MAAAA,SAAS,EAAEE,SAAS,CAACF,SADZ;AAETC,MAAAA,QAAQ,EAAEC,SAAS,CAACD,QAAV,CAAmBQ,MAAnB,CAA0BP,SAAS,CAACF,SAApC;AAFD,KAAD,CAAZ;AAIH,GAND,CA7CiB,CAsDjB;AACA;;;AACA,SAAQ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEJ;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,MAA/B;AAAsC,IAAA,QAAQ,EAAEI,kBAAhD;AAAoE,IAAA,KAAK,EAAEF,SAAS,CAACF,SAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFI,EAGJ;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEQ,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHI,EAIJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,SAAS,CAACD,QAAV,CAAmBS,GAAnB,CAAuB,UAAAZ,IAAI;AAAA,WAAG;AAAI,MAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBA,IAAhB,CAAH;AAAA,GAA3B,CADL,CAJI,CAAR;AAQH,CAhED;;AAkEA,eAAeA,IAAf","sourcesContent":["//use means hook functions\r\nimport React, {useState} from 'react';\r\n\r\nconst todo = props =>{\r\n//     //useState passes two values, inputState[0] and inputState[1]. Unlike setState in class based components,\r\n//      usestate will not merge, but replace entire old state with new one. Use state must be used at the top level of \r\n//      component function. Has to be component function. \r\n//     //[todoName, setTodoName] is array destructuring. Pull out elements of an array to assign them\r\n//     const [todoName, setTodoName] = useState('');\r\n// //separate useState is not required but reccomended for ease of separation, control, and manipulation\r\n//     const [todoList, setTodoList] = useState([]);\r\n\r\n//     const inputChangeHandler=(event)=>{\r\n//         // inputState[1](event.target.value)\r\n//         setTodoName(event.target.value)\r\n//     }\r\n\r\n//     const todoAddHandler=()=>{\r\n//         // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\r\n//         setTodoList(todoList.concat(todoName))\r\n//     }\r\n\r\n\r\n  //inputState[0] is a reference to latest state\r\n//     //inputState[1] is a function we can execute to update state to update \r\n//     return (<React.Fragment>\r\n\r\n//         <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoName}/>\r\n//         <button type='button' onClick={todoAddHandler}>Add</button>\r\n//         <ul>\r\n//             {todoList.map(todo=>(<li key={todo}>{todo}</li>))}\r\n//         </ul>\r\n//     </React.Fragment>)\r\n// };\r\n\r\n// export default todo;\r\n\r\n\r\n    //multiple states in one useState\r\n const [todoState, setTodoState] = useState({userInput: '', todoList: []});\r\n\r\n    const inputChangeHandler=(event)=>{\r\n        setTodoState({\r\n            userInput: event.target.value, \r\n            todoList: todoState.todoList\r\n        })\r\n    }\r\n\r\n    const todoAddHandler=()=>{\r\n        // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\r\n        setTodoState({\r\n            userInput: todoState.userInput, \r\n            todoList: todoState.todoList.concat(todoState.userInput)\r\n        })\r\n    }\r\n\r\n\r\n    //inputState[0] is a reference to latest state\r\n    //inputState[1] is a function we can execute to update state to update \r\n    return (<React.Fragment>\r\n\r\n        <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoState.userInput}/>\r\n        <button type='button' onClick={todoAddHandler}>Add</button>\r\n        <ul>\r\n            {todoState.todoList.map(todo=>(<li key={todo}>{todo}</li>))}\r\n        </ul>\r\n    </React.Fragment>)\r\n};\r\n\r\nexport default todo;"]},"metadata":{},"sourceType":"module"}