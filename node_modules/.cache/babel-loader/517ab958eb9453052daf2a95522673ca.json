{"ast":null,"code":"import _slicedToArray from \"P:\\\\hooks-02-hooks-enabled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react'; // custom hook functions must start with use\n\nexport var useFormInput = function useFormInput() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setvalue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validity = _useState4[0],\n      setValidity = _useState4[1];\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    setvalue(event.target.value);\n\n    if (event.target.value.trim() === '') {\n      setValidity(false);\n    } else {\n      setValidity(true);\n    }\n  };\n\n  return {\n    value: value,\n    onchange: inputChangeHandler,\n    validity: validity\n  };\n};","map":{"version":3,"sources":["P:\\hooks-02-hooks-enabled\\src\\hooks\\forms.js"],"names":["useState","useFormInput","value","setvalue","validity","setValidity","inputChangeHandler","event","target","trim","onchange"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CACA;;AACA,OAAO,IAAMC,YAAY,GAAE,SAAdA,YAAc,GAAI;AAAA,kBACDD,QAAQ,CAAC,EAAD,CADP;AAAA;AAAA,MACpBE,KADoB;AAAA,MACbC,QADa;;AAAA,mBAEKH,QAAQ,CAAC,KAAD,CAFb;AAAA;AAAA,MAEpBI,QAFoB;AAAA,MAEVC,WAFU;;AAI3B,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK,EAAG;AAC/BJ,IAAAA,QAAQ,CAACI,KAAK,CAACC,MAAN,CAAaN,KAAd,CAAR;;AACA,QAAGK,KAAK,CAACC,MAAN,CAAaN,KAAb,CAAmBO,IAAnB,OAA4B,EAA/B,EAAkC;AAC9BJ,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH,KAFD,MAEK;AACDA,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ,GAPD;;AAQA,SAAO;AAACH,IAAAA,KAAK,EAAEA,KAAR;AAAeQ,IAAAA,QAAQ,EAAEJ,kBAAzB;AAA6CF,IAAAA,QAAQ,EAARA;AAA7C,GAAP;AACH,CAbM","sourcesContent":["import {useState} from 'react'\r\n// custom hook functions must start with use\r\nexport const useFormInput =()=>{\r\n    const [value, setvalue] = useState('');\r\n    const [validity, setValidity] = useState(false);\r\n\r\n    const inputChangeHandler = event =>{\r\n        setvalue(event.target.value);\r\n        if(event.target.value.trim()===''){\r\n            setValidity(false);\r\n        }else{\r\n            setValidity(true);\r\n        }\r\n    }\r\n    return {value: value, onchange: inputChangeHandler, validity }\r\n}"]},"metadata":{},"sourceType":"module"}