{"ast":null,"code":"import _slicedToArray from \"P:\\\\hooks-02-hooks-enabled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"P:\\\\hooks-02-hooks-enabled\\\\src\\\\components\\\\Todo.js\";\n//use means hook functions\nimport React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\n\nvar todo = function todo(props) {\n  //useState passes two values, inputState[0] and inputState[1]. Unlike setState in class based components,\n  //  usestate will not merge, but replace entire old state with new one. Use state must be used at the top level of \n  //  component function. Has to be component function. Cannot call useState in loops or any nested functions. Has to be\n  //  root level of the component.\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      todoName = _useState2[0],\n      setTodoName = _useState2[1]; //separate useState is not required but reccomended for ease of separation, control, and manipulation\n  //Commented out below since we are using reducers in its place\n  // const [todoList, setTodoList] = useState([]);\n\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      submittedTodo = _useState4[0],\n      setSubmittedTodo = _useState4[1];\n\n  var todoListReducer = function todoListReducer(state, action) {\n    switch (action.type) {\n      case 'ADD':\n        return state.concat(action.payload);\n\n      case 'SET':\n        return action.payload;\n\n      case 'REMOVE':\n        return state.filter(function (todo) {\n          return todo.id !== action.payload;\n        });\n\n      default:\n        return state;\n    }\n  };\n\n  var _useReducer = useReducer(todoListReducer, []),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      todoList = _useReducer2[0],\n      dispatch = _useReducer2[1]; // Use effect is function passes another function to be executed when called.\n  //For this particular case it will be executed as soon as the component loads\n\n\n  useEffect(function () {\n    axios.get('https://todolist-1d92c.firebaseio.com/todos.json').then(function (result) {\n      console.log(result);\n      var todoData = result.data;\n      var todos = [];\n\n      for (var key in todoData) {\n        todos.push({\n          id: key,\n          name: todoData[key].name\n        });\n      } //Reducer refactor\n      // setTodoList(todos);\n\n\n      dispatch({\n        type: 'ADD'\n      });\n    }); //executes this return function on every rerender, can be used as a clean up\n\n    return function () {\n      console.log(\"Cleanup\");\n    }; //adding the empty array as a second argument makes useEffect act like componentDidMount, therefore only loads once\n    //No argument will run for every render cycle. \n  }, [todoName]);\n  useEffect(function () {\n    if (submittedTodo) {\n      setTodoList(todoList.concat(submittedTodo));\n    } //runs after everytime submittedTodo changes\n\n  }, [submittedTodo]);\n\n  var mouseMoveHandler = function mouseMoveHandler(event) {\n    console.log(event.clientX, event.clientY);\n  };\n\n  useEffect(function () {\n    document.addEventListener('mousemove', mouseMoveHandler);\n    return function () {\n      document.removeEventListener('mousemove', mouseMoveHandler);\n    };\n  }, []);\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    // inputState[1](event.target.value)\n    setTodoName(event.target.value);\n  };\n\n  var todoAddHandler = function todoAddHandler() {\n    // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\n    axios.post('https://todolist-1d92c.firebaseio.com/todos.json', {\n      name: todoName\n    }).then(function (res) {\n      console.log(res);\n      var todoItem = {\n        id: res.data.name,\n        name: todoName\n      };\n      setSubmittedTodo(todoItem); // setTodoList(todoList.concat(todoItem));\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }; //   inputState[0] is a reference to latest state\n  //inputState[1] is a function we can execute to update state to update \n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Todo\",\n    onChange: inputChangeHandler,\n    value: todoName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: todoAddHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, todoList.map(function (todo) {\n    return React.createElement(\"li\", {\n      key: todo.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, todo.name);\n  })));\n};\n\nexport default todo; //     //multiple states in one useState\n//  const [todoState, setTodoState] = useState({userInput: '', todoList: []});\n//     const inputChangeHandler=(event)=>{\n//         setTodoState({\n//             userInput: event.target.value, \n//             todoList: todoState.todoList\n//         })\n//     }\n//     const todoAddHandler=()=>{\n//         // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\n//         setTodoState({\n//             userInput: todoState.userInput, \n//             todoList: todoState.todoList.concat(todoState.userInput)\n//         })\n//     }\n//     //inputState[0] is a reference to latest state\n//     //inputState[1] is a function we can execute to update state to update \n//     return (<React.Fragment>\n//         <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoState.userInput}/>\n//         <button type='button' onClick={todoAddHandler}>Add</button>\n//         <ul>\n//             {todoState.todoList.map(todo=>(<li key={todo}>{todo}</li>))}\n//         </ul>\n//     </React.Fragment>)\n// };\n// export default todo;","map":{"version":3,"sources":["P:\\hooks-02-hooks-enabled\\src\\components\\Todo.js"],"names":["React","useState","useEffect","useReducer","axios","todo","props","todoName","setTodoName","submittedTodo","setSubmittedTodo","todoListReducer","state","action","type","concat","payload","filter","id","todoList","dispatch","get","then","result","console","log","todoData","data","todos","key","push","name","setTodoList","mouseMoveHandler","event","clientX","clientY","document","addEventListener","removeEventListener","inputChangeHandler","target","value","todoAddHandler","post","res","todoItem","catch","err","map"],"mappings":"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","sourcesContent":["//use means hook functions\r\nimport React, {useState, useEffect, useReducer} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst todo = props =>{\r\n    //useState passes two values, inputState[0] and inputState[1]. Unlike setState in class based components,\r\n    //  usestate will not merge, but replace entire old state with new one. Use state must be used at the top level of \r\n    //  component function. Has to be component function. Cannot call useState in loops or any nested functions. Has to be\r\n    //  root level of the component.\r\n    //[todoName, setTodoName] is array destructuring. Pull out elements of an array to assign them\r\n    const [todoName, setTodoName] = useState('');\r\n//separate useState is not required but reccomended for ease of separation, control, and manipulation\r\n\r\n    //Commented out below since we are using reducers in its place\r\n    // const [todoList, setTodoList] = useState([]);\r\n    const [submittedTodo, setSubmittedTodo] = useState(null);\r\n\r\n\r\n\r\n    const todoListReducer = (state, action)=>{\r\n        switch (action.type){\r\n            case 'ADD':\r\n                return state.concat(action.payload);\r\n            case 'SET':\r\n                return action.payload;\r\n            case 'REMOVE':\r\n                return state.filter((todo)=> todo.id !== action.payload);   \r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n\r\n\r\n       const [todoList, dispatch]= useReducer(todoListReducer, [])\r\n\r\n    // Use effect is function passes another function to be executed when called.\r\n    //For this particular case it will be executed as soon as the component loads\r\n    useEffect(()=>{\r\n        axios.get('https://todolist-1d92c.firebaseio.com/todos.json')\r\n        .then(result =>{\r\n            console.log(result);\r\n            const todoData = result.data\r\n            const todos =[];\r\n            for (const key in todoData){\r\n                todos.push({id: key, name: todoData[key].name})\r\n            }\r\n            //Reducer refactor\r\n            // setTodoList(todos);\r\n            dispatch({type: 'ADD',})\r\n        })\r\n        //executes this return function on every rerender, can be used as a clean up\r\n        return () =>{\r\n            console.log(\"Cleanup\")\r\n        }\r\n        //adding the empty array as a second argument makes useEffect act like componentDidMount, therefore only loads once\r\n        //No argument will run for every render cycle. \r\n    }, [todoName])\r\n\r\n\r\n    useEffect(()=>{\r\n        if(submittedTodo){\r\n            setTodoList(todoList.concat(submittedTodo));\r\n        }\r\n  //runs after everytime submittedTodo changes\r\n    }, [submittedTodo]\r\n    )\r\n    const mouseMoveHandler =event=>{\r\n        console.log(event.clientX, event.clientY)\r\n    }\r\n\r\n\r\n\r\n\r\n        useEffect(()=>{\r\n            document.addEventListener('mousemove', mouseMoveHandler)\r\n            return()=>{\r\n                document.removeEventListener('mousemove', mouseMoveHandler)\r\n            }\r\n        }, [])\r\n\r\n    const inputChangeHandler=(event)=>{\r\n        // inputState[1](event.target.value)\r\n        setTodoName(event.target.value)\r\n    }\r\n\r\n    const todoAddHandler=()=>{\r\n        // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\r\n \r\n        axios.post('https://todolist-1d92c.firebaseio.com/todos.json', {name: todoName})\r\n        .then(res=>{\r\n            console.log(res);\r\n            const todoItem= {id: res.data.name, name: todoName};\r\n            setSubmittedTodo(todoItem)\r\n            // setTodoList(todoList.concat(todoItem));\r\n        }).catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n\r\n    //   inputState[0] is a reference to latest state\r\n    //inputState[1] is a function we can execute to update state to update \r\n    return (<React.Fragment>\r\n\r\n        <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoName}/>\r\n        <button type='button' onClick={todoAddHandler}>Add</button>\r\n        <ul>\r\n            {todoList.map(todo=>(<li key={todo.id}>{todo.name}</li>))}\r\n        </ul>\r\n    </React.Fragment>)\r\n};\r\n\r\nexport default todo;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     //multiple states in one useState\r\n//  const [todoState, setTodoState] = useState({userInput: '', todoList: []});\r\n\r\n//     const inputChangeHandler=(event)=>{\r\n//         setTodoState({\r\n//             userInput: event.target.value, \r\n//             todoList: todoState.todoList\r\n//         })\r\n//     }\r\n\r\n//     const todoAddHandler=()=>{\r\n//         // concat returns new array. new array is passed to setTodolist, then old array is replaced with that\r\n//         setTodoState({\r\n//             userInput: todoState.userInput, \r\n//             todoList: todoState.todoList.concat(todoState.userInput)\r\n//         })\r\n//     }\r\n\r\n\r\n//     //inputState[0] is a reference to latest state\r\n//     //inputState[1] is a function we can execute to update state to update \r\n//     return (<React.Fragment>\r\n\r\n//         <input type='text' placeholder=\"Todo\" onChange={inputChangeHandler} value={todoState.userInput}/>\r\n//         <button type='button' onClick={todoAddHandler}>Add</button>\r\n//         <ul>\r\n//             {todoState.todoList.map(todo=>(<li key={todo}>{todo}</li>))}\r\n//         </ul>\r\n//     </React.Fragment>)\r\n// };\r\n\r\n// export default todo;"]},"metadata":{},"sourceType":"module"}